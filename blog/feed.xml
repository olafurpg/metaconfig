<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Metaconfig Blog</title>
        <link>https://scalameta.org/metaconfig/metaconfig/blog</link>
        <description>The best place to stay up-to-date with the latest Metaconfig news and events.</description>
        <lastBuildDate>Tue, 24 Mar 2020 06:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Metaconfig Blog</title>
            <url>https://scalameta.org/metaconfig/metaconfig/img/scalameta-logo.png</url>
            <link>https://scalameta.org/metaconfig/metaconfig/blog</link>
        </image>
        <copyright>Copyright Â© 2020 Scalameta</copyright>
        <item>
            <title><![CDATA[Using ScalaCheck with MUnit]]></title>
            <link>https://scalameta.org/metaconfig/metaconfig/blog/2020/03/24/scalacheck.html</link>
            <guid>https://scalameta.org/metaconfig/metaconfig/blog/2020/03/24/scalacheck.html</guid>
            <pubDate>Tue, 24 Mar 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>Property-based testing is a popular testing style and its most widely used
implementation for Scala is the <a href="https://www.scalacheck.org">ScalaCheck</a>
library.</p>
<p>Starting with version 0.7.0, MUnit introduces a dedicated integration for
ScalaCheck, which we'll explore in this blog post.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[Cross-platform async testing support]]></title>
            <link>https://scalameta.org/metaconfig/metaconfig/blog/2020/02/16/async.html</link>
            <guid>https://scalameta.org/metaconfig/metaconfig/blog/2020/02/16/async.html</guid>
            <pubDate>Sun, 16 Feb 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>MUnit v0.4.x did not support truly async tests on platforms like JavaScript. For
example, the following test case would succeed even if it returns a failing
future:</p>
<pre><code class="hljs css language-scala">test(<span class="hljs-string">"should fail after 100 milliseconds"</span>) {
  <span class="hljs-keyword">val</span> p = <span class="hljs-type">Promise</span>[<span class="hljs-type">Unit</span>]()
  setTimeout(<span class="hljs-number">100</span>) {
    p.failure(<span class="hljs-keyword">new</span> <span class="hljs-type">RuntimeException</span>(<span class="hljs-string">"boom"</span>))
  }
  p.future
}
</code></pre>
<p>The latest MUnit v0.5.0 release fixes this issue by adding support for async
tests on all platforms meaning that the example test case above fails as
expected after 100 milliseconds.</p>
]]></description>
        </item>
        <item>
            <title><![CDATA[MUnit is a new Scala testing library]]></title>
            <link>https://scalameta.org/metaconfig/metaconfig/blog/2020/02/01/hello-world.html</link>
            <guid>https://scalameta.org/metaconfig/metaconfig/blog/2020/02/01/hello-world.html</guid>
            <pubDate>Sat, 01 Feb 2020 06:00:00 GMT</pubDate>
            <description><![CDATA[<p>Hello world! I'm excited to announce the first release of MUnit, a new Scala
testing library with a focus on actionable errors and extensible APIs. You may
be thinking &quot;Why create Yet Another Scala testing library?&quot;. It's a good
question and this post is my attempt to explain the motivations for creating
MUnit.</p>
]]></description>
        </item>
    </channel>
</rss>